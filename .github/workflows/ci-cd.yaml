name: Deploy to Kubernetes (Blue-Green)

on:
  push:
    branches:
      - master

env:
  EKS_CLUSTER_NAME: moon-agent-tracker-cluster
  AWS_REGION: ap-south-1

  DOCKER_IMAGE_AGENT: 715841324407.dkr.ecr.ap-south-1.amazonaws.com/agent-service
  DOCKER_IMAGE_INTEGRATION: 715841324407.dkr.ecr.ap-south-1.amazonaws.com/integration-service
  DOCKER_IMAGE_NOTIFICATION: 715841324407.dkr.ecr.ap-south-1.amazonaws.com/notification-service
  DOCKER_IMAGE_AGGREGATOR: 715841324407.dkr.ecr.ap-south-1.amazonaws.com/aggregator-service

jobs:
  deploy:
    name: CI/CD for Moon Agent Tracker
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3

    - name: Set up kubeconfig
      run: |
        aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

    # üê≥ Push Docker images to ECR (CI Integration Part)
    - name: Build and Push Docker Images to ECR
      run: |
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin 715841324407.dkr.ecr.$AWS_REGION.amazonaws.com

        docker build -t agent-service ./agent-service
        docker tag agent-service:latest $DOCKER_IMAGE_AGENT:latest
        docker push $DOCKER_IMAGE_AGENT:latest

        docker build -t integration-service ./integration-service
        docker tag integration-service:latest $DOCKER_IMAGE_INTEGRATION:latest
        docker push $DOCKER_IMAGE_INTEGRATION:latest

        docker build -t notification-service ./notification-service
        docker tag notification-service:latest $DOCKER_IMAGE_NOTIFICATION:latest
        docker push $DOCKER_IMAGE_NOTIFICATION:latest

        docker build -t aggregator-service ./aggregator-service
        docker tag aggregator-service:latest $DOCKER_IMAGE_AGGREGATOR:latest
        docker push $DOCKER_IMAGE_AGGREGATOR:latest

    # üü¢ Deploy Green Environment
    - name: Deploy Green Environment
      run: |
        kubectl apply -f k8s/blue-green/green/
        kubectl apply -f k8s/blue-green/services-green/

    # üü¢ Wait for Green Rollout to Complete
    - name: Wait for Green Rollout
      run: |
        kubectl rollout status deployment/agent-service-green
        kubectl rollout status deployment/integration-service-green
        kubectl rollout status deployment/notification-service-green
        kubectl rollout status deployment/aggregator-service-green

    # ‚úÖ Health Checks (Green)
    - name: Health Check Agent Service (Green)
      run: |
        POD=$(kubectl get pods -l app=agent-service,version=green -o jsonpath="{.items[0].metadata.name}")
        kubectl port-forward $POD 5000:5000 &
        sleep 5
        curl --fail http://localhost:5000 || exit 1

    - name: Health Check Notification Service (Green)
      run: |
        POD=$(kubectl get pods -l app=notification-service,version=green -o jsonpath="{.items[0].metadata.name}")
        kubectl port-forward $POD 5002:5002 &
        sleep 5
        curl --fail http://localhost:5002 || exit 1

    - name: Health Check Integration Service (Green)
      run: |
        POD=$(kubectl get pods -l app=integration-service,version=green -o jsonpath="{.items[0].metadata.name}")
        kubectl port-forward $POD 5001:5001 &
        sleep 5
        curl --fail http://localhost:5001 || exit 1

    - name: Health Check Aggregator Service (Green)
      run: |
        POD=$(kubectl get pods -l app=aggregator-service,version=green -o jsonpath="{.items[0].metadata.name}")
        kubectl port-forward $POD 5003:5003 &
        sleep 5
        curl --fail http://localhost:5003 || exit 1

    # üö¶ Switch traffic to Green
    - name: Switch traffic to Green
      run: |
        sed -i 's/version: blue/version: green/' k8s/blue-green/services/*.yaml
        kubectl apply -f k8s/blue-green/services/

    # üßº Cleanup Blue (Optional)
    - name: Delete Blue Deployment (optional cleanup)
      run: |
        kubectl delete -f k8s/blue-green/blue/ || true